%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.0.7
%%CreationDate: Tue Feb 25 12:08:29 2014
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
____UAAGAAAUAG______AGUAGGGGGUUUGCGCCGCAAACCCCCUAAUUGG__GCCGC_GGGC__CCCCAAUAACGUA____\
) def
/coor [
[88.35340881 303.81961060]
[80.60186768 290.23846436]
[83.44448853 274.86141968]
[95.53907013 264.94903564]
[95.53907013 249.94905090]
[95.53907013 234.94905090]
[95.53907013 219.94905090]
[95.53907013 204.94905090]
[95.53907013 189.94905090]
[95.53907013 174.94905090]
[95.53907013 159.94905090]
[95.53907013 144.94905090]
[95.53907013 129.94905090]
[95.53907013 114.94904327]
[91.47724915 112.85205078]
[88.24159241 109.69819641]
[86.09210968 105.78385925]
[85.18887329 101.46435547]
[85.58038330 97.12178802]
[87.20196533 93.13124847]
[89.88404846 89.82841492]
[82.54278564 76.74767303]
[75.20151520 63.66693497]
[67.86024475 50.58619308]
[60.51897812 37.50545120]
[53.17771149 24.42470932]
[45.83644485 11.34396839]
[38.49517441 -1.73677230]
[31.15390778 -14.81751347]
[23.81264114 -27.89825439]
[16.47137260 -40.97899628]
[9.13010502 -54.05973816]
[1.78883755 -67.14048004]
[-5.55243015 -80.22122192]
[-18.57709122 -91.07453918]
[-11.75350857 -106.59468842]
[5.04906368 -104.33418274]
[7.52831078 -87.56248474]
[14.86957836 -74.48174286]
[22.21084595 -61.40100479]
[29.55211449 -48.32026291]
[36.89338303 -35.23952103]
[44.23464966 -22.15878105]
[51.57591629 -9.07804012]
[58.91718674 4.00270128]
[66.25845337 17.08344269]
[73.59972382 30.16418266]
[80.94098663 43.24492264]
[88.28225708 56.32566452]
[95.62351990 69.40641022]
[102.96479034 82.48714447]
[116.66053772 88.60488129]
[131.30166626 85.34342957]
[145.94281006 82.08197021]
[160.58395386 78.82051849]
[175.22508240 75.55906677]
[189.86622620 72.29761505]
[204.50737000 69.03616333]
[219.14849854 65.77471161]
[230.85543823 54.29082489]
[246.57955933 58.94746399]
[250.14521790 74.95427704]
[237.88439941 85.84482574]
[222.40995789 80.41584778]
[207.76881409 83.67729950]
[193.12767029 86.93875122]
[178.48654175 90.20020294]
[163.84539795 93.46166229]
[149.20426941 96.72311401]
[134.56312561 99.98456573]
[119.92198944 103.24601746]
[110.53907013 114.94904327]
[110.53907013 129.94905090]
[110.53907013 144.94905090]
[110.53907013 159.94905090]
[110.53907013 174.94905090]
[110.53907013 189.94905090]
[110.53907013 204.94905090]
[110.53907013 219.94905090]
[110.53907013 234.94905090]
[110.53907013 249.94905090]
[110.53907013 264.94903564]
[122.63365173 274.86141968]
[125.47627258 290.23846436]
[117.72473145 303.81961060]
] def
/pairs [
[4 82]
[5 81]
[6 80]
[7 79]
[8 78]
[9 77]
[10 76]
[11 75]
[12 74]
[13 73]
[14 72]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[52 71]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
4 82 6 gmark
4 cmark
82 cmark
5 cmark
81 cmark
6 cmark
80 cmark
7 cmark
79 cmark
8 cmark
78 cmark
9 cmark
77 cmark
10 cmark
76 cmark
11 cmark
75 cmark
12 cmark
74 cmark
13 cmark
73 cmark
14 cmark
72 cmark
21 cmark
51 cmark
22 cmark
50 cmark
23 49 1 gmark
23 cmark
49 cmark
24 cmark
48 cmark
25 cmark
47 cmark
26 46 1 gmark
26 cmark
46 cmark
27 cmark
45 cmark
28 44 1 gmark
28 cmark
44 cmark
29 cmark
43 cmark
30 cmark
42 cmark
31 cmark
41 cmark
32 cmark
40 cmark
33 cmark
39 cmark
34 38 3 gmark
34 cmark
38 cmark
52 71 2 gmark
52 cmark
71 cmark
53 70 2 gmark
53 cmark
70 cmark
54 69 2 gmark
54 cmark
69 cmark
55 68 2 gmark
55 cmark
68 cmark
56 67 2 gmark
56 cmark
67 cmark
57 66 2 gmark
57 cmark
66 cmark
58 65 2 gmark
58 cmark
65 cmark
59 64 2 gmark
59 cmark
64 cmark

% End Annotations
% show it
showpage
end
%%EOF
