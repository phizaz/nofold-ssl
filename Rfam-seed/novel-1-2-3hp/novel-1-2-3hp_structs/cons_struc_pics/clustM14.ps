%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.0.7
%%CreationDate: Tue Feb 25 12:09:04 2014
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
UACGAAAUAAGUAGCACCCUGGCCAGAGCACUUGGAUUAAGUAAAAUCAUAAGAAUCCUACUAAAAUCGUA\
) def
/coor [
[90.58699036 309.19613647]
[90.58699036 294.19613647]
[90.58699036 279.19613647]
[90.58699036 264.19613647]
[90.58699036 249.19613647]
[90.58699036 234.19613647]
[90.58699036 219.19613647]
[90.58699036 204.19613647]
[90.58699036 189.19613647]
[90.58699036 174.19613647]
[90.58699036 159.19613647]
[90.58699036 144.19613647]
[90.58699036 129.19613647]
[90.58699036 114.19613647]
[81.71733856 102.09947205]
[67.41159058 97.58888245]
[53.10583496 93.07829285]
[38.80007935 88.56771088]
[24.49432564 84.05712128]
[8.60973263 88.13287354]
[-2.66735482 76.22660065]
[2.26396394 60.58645248]
[18.33077049 57.30167770]
[29.00491142 69.75136566]
[43.31066513 74.26195526]
[57.61642075 78.77253723]
[71.92217255 83.28312683]
[86.22792816 87.79371643]
[98.32460022 78.92407227]
[98.32460022 63.92406845]
[98.32460022 48.92406845]
[98.32460022 33.92406845]
[98.32460022 18.92407036]
[88.04283142 6.60884428]
[91.40171051 -9.07864952]
[105.82460022 -16.10430908]
[120.24748230 -9.07864952]
[123.60636902 6.60884428]
[113.32460022 18.92407036]
[113.32460022 33.92406845]
[113.32460022 48.92406845]
[113.32460022 63.92406845]
[113.32460022 78.92407227]
[125.42126465 87.79371643]
[139.72702026 83.28312683]
[154.03277588 78.77253723]
[168.33853149 74.26195526]
[182.64428711 69.75136566]
[193.31842041 57.30167770]
[209.38523865 60.58645248]
[214.31655884 76.22660065]
[203.03945923 88.13287354]
[187.15487671 84.05712128]
[172.84912109 88.56771088]
[158.54336548 93.07829285]
[144.23760986 97.58888245]
[129.93185425 102.09947205]
[105.58699036 114.19613647]
[105.58699036 129.19613647]
[105.58699036 144.19613647]
[105.58699036 159.19613647]
[105.58699036 174.19613647]
[105.58699036 189.19613647]
[105.58699036 204.19613647]
[105.58699036 219.19613647]
[105.58699036 234.19613647]
[105.58699036 249.19613647]
[105.58699036 264.19613647]
[105.58699036 279.19613647]
[105.58699036 294.19613647]
[105.58699036 309.19613647]
] def
/pairs [
[1 71]
[2 70]
[3 69]
[4 68]
[5 67]
[6 66]
[7 65]
[8 64]
[9 63]
[10 62]
[11 61]
[12 60]
[13 59]
[14 58]
[15 28]
[16 27]
[17 26]
[18 25]
[19 24]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% Start Annotations
1 cmark
71 cmark
2 cmark
70 cmark
3 cmark
69 cmark
4 cmark
68 cmark
5 cmark
67 cmark
6 cmark
66 cmark
7 cmark
65 cmark
8 cmark
64 cmark
9 cmark
63 cmark
10 cmark
62 cmark
11 cmark
61 cmark
12 cmark
60 cmark
13 cmark
59 cmark
14 cmark
58 cmark
15 cmark
28 cmark
16 cmark
27 cmark
17 cmark
26 cmark
18 cmark
25 cmark
19 cmark
24 cmark
29 cmark
43 cmark
30 cmark
42 cmark
31 cmark
41 cmark
32 cmark
40 cmark
33 cmark
39 cmark
44 cmark
57 cmark
45 cmark
56 cmark
46 cmark
55 cmark
47 cmark
54 cmark
48 cmark
53 cmark

% End Annotations
% show it
showpage
end
%%EOF
